<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".out" #>
<#@ assembly name="System.Core" #>
<#@ include file="$(projectDir)\Includes\ReactHelper.tt" #>
<#@ assembly name="$(projectDir)\Assemblies\KellermanSoftware.NET-Code-Generator-Logic.dll" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic.Models" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
/* 
Name: React Form
Author: Greg Finzer
Description: Create a simple React Form with a list of input controls
*/
    CodeGenProject proj= LoadProject();
  
    foreach(var entity in  proj.Entities)
    {    
        bool insideGroupBox = false;   
        bool insideForm = false; 
#>
import React from 'react'

export default class <#=proj.GetControlName(ControlType.Form, entity.Name) #> extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
<#foreach (var prop in entity.Properties)
{#>
        <#=ReactHelper.ToStateProp(prop)#>
<#}#>
    };

      this.handleSubmit = this.handleSubmit.bind(this);
    }
  
    handleChange = (event) => {                
        let id = event.target.id;

        switch(event.target.type) {
            case "radio":
                let radioValue = event.target.value;
                let radioName = event.target.name;
                this.setState({[radioName]: radioValue});
                break;
            case "checkbox":
                let checked = !this.state[id];
                this.setState({[id]: checked});
                    break;
            default:
                let val = event.target.value;
                this.setState({[id]: val});
                break;
        }
      }
  
    handleSubmit(event) {
      alert(JSON.stringify(this.state));
      event.preventDefault();
    }
  
    render() {
      return (
        <form onSubmit={this.handleSubmit}>
            <fieldset>
			    <legend><#=entity.Description #></legend>
<#foreach(var prop in entity.Properties)
{#>
                <div>
                    <#=ReactHelper.ToLabelText(prop) #> 
                    <#=ReactHelper.ToControlText(prop) #>
                </div>
<#}#>
            </fieldset>

          <input type="submit" value="Submit" />
        </form>
      );
    }
  }
<# 
        string fileName = proj.GetFileName(entity.Name) + ".js";
        SaveOutput(fileName);
    }
#>
<#+
    const string codeGenTemplatesName = "NET-Code-Generator-Templates";
    const string inputName= "GenerationInput.json";

    public CodeGenProject LoadProject()
    {
        string directory = GetSolutionDirectory();
        string filePath= Path.Combine(directory, inputName);
        return CodeGenProject.LoadFromFile(filePath);
    }

    private string GetSolutionDirectory()
    {
        string templateDirectory= GetTemplateDirectory();
        int projectIndex= templateDirectory.IndexOf(codeGenTemplatesName);
        return templateDirectory.Substring(0, projectIndex + codeGenTemplatesName.Length);
    }

    private string GetTemplateDirectory()
    {
        return Path.GetDirectoryName(Host.TemplateFile);
    }

    private void SaveOutput(string outputFileName)
    {
        SaveOutput(outputFileName, string.Empty);
    }

    private void SaveOutput(string outputFileName, string subDirectory) 
	{
        string templateDirectory = GetTemplateDirectory();
        if (!string.IsNullOrEmpty(subDirectory))
        {
            templateDirectory = Path.Combine(templateDirectory, subDirectory);
        }
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        if (!Directory.Exists(templateDirectory))
        {
            Directory.CreateDirectory(templateDirectory);
        }

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Clear();
    }
#>