<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".out" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(projectDir)\Assemblies\KellermanSoftware.NET-Code-Generator-Logic.dll" #>
<#@ include file="$(projectDir)\Includes\VueJSHelper.tt" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic.Models" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
/* 
Name: Vue JS Form
Author: Greg Finzer
Description: Create a simple Vue JS Form with a list of input controls
*/
    CodeGenProject proj= LoadProject();
  
    foreach(var entity in  proj.Entities)
    {    
        bool insideGroupBox= false;
#>
<template>
<#
PushIndent("\t");

if (!entity.Properties.Any(o => o.ControlType == ControlType.GroupBox)) 
{
    insideGroupBox= true;
    PushIndent("\t");
    WriteLine("<fieldset>");
    PushIndent("\t");
    WriteLine("<legend>" + entity.Description + "</legend>");
}
foreach (var prop in entity.Properties)
{
    if (prop.IsInputControl)
    {
        WriteLine("<div>");
        PushIndent("\t");
        WriteLine("<label for=\"" + prop.ControlName + "\">" + prop.Description + "</label>");
    }        
    else if (prop.ControlType == ControlType.GroupBox && insideGroupBox)
    {
        PopIndent();
        WriteLine("</fieldset>");
    }

    WriteLine(VueJSHelper.ToControlText(prop));

    if (prop.IsInputControl)
    {
        PopIndent();
        WriteLine("</div>");
    }
    else if (prop.ControlType == ControlType.GroupBox)
    {
        PushIndent("\t");
        insideGroupBox = true;
    }
}

if (insideGroupBox) 
{ 
    PopIndent();
    WriteLine("</fieldset>");
}

ClearIndent();
#>
    
</template>

<script>
    export default {
      data() {
        return {
<#foreach (var prop in entity.Properties)
{#>
            <#=VueJSHelper.ToDataProp(prop)#>
<#}#>
        }
      }
    }
</script>

<style>

</style>
<# 
        string fileName = proj.GetFileName(entity.Name) + ".vue";
        SaveOutput(fileName);
    }
#>
<#+
    //Don't change the code below or the generation will not work

    public CodeGenProject LoadProject()
    {
        string directory = GetSolutionDirectory();
        string filePath= Path.Combine(directory, Constants.GenerationInputFileName);
        return CodeGenProject.LoadFromFile(filePath);
    }

    private string GetSolutionDirectory()
    {
        string templateDirectory= GetTemplateDirectory();
        int projectIndex= templateDirectory.IndexOf(Constants.TemplatesDirectoryName);
        return templateDirectory.Substring(0, projectIndex + Constants.TemplatesDirectoryName.Length);
    }

    private string GetTemplateDirectory()
    {
        return Path.GetDirectoryName(Host.TemplateFile);
    }

    private void SaveOutput(string outputFileName)
    {
        SaveOutput(outputFileName, string.Empty);
    }

    private void SaveOutput(string outputFileName, string subDirectory) 
	{
        string templateDirectory = GetTemplateDirectory();
        if (!string.IsNullOrEmpty(subDirectory))
        {
            templateDirectory = Path.Combine(templateDirectory, subDirectory);
        }
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        if (!Directory.Exists(templateDirectory))
        {
            Directory.CreateDirectory(templateDirectory);
        }

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Clear();
    }
#>