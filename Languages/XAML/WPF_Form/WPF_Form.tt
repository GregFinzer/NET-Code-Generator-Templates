<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".out" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(projectDir)\Assemblies\KellermanSoftware.NET-Code-Generator-Logic.dll" #>
<#@ include file="$(projectDir)\Includes\XAMLHelper.tt" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic.Models" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
/* 
Name: WPF Form
Author: Greg Finzer
Description: Create a WPF Form with input controls
*/
    CodeGenProject proj= LoadProject();
  
    foreach(var entity in  proj.Entities)
    {    
#>
<Window x:Name="<#=entity.NamePascalCase#>" x:Class="<#=proj.ProjectNamespace#>.<#=proj.GetControlName(ControlType.Form, entity.Name)#>"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:<#=proj.ProjectNamespace#>"
        mc:Ignorable="d"
        Title="<#=entity.Description#>" Height="768" Width="1024"
        FontSize="18"
        FontFamily="Arial">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="10" ></ColumnDefinition>
            <ColumnDefinition Width="*" ></ColumnDefinition>
            <ColumnDefinition Width="10" ></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="10"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="10"></RowDefinition>
        </Grid.RowDefinitions>

        <GroupBox x:Name="<#=proj.GetControlName(ControlType.GroupBox, entity.Name)#>" Grid.Column="1" Grid.Row="1" Header="<#=entity.Description#>" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10" />
                    <ColumnDefinition Width="auto"  ></ColumnDefinition>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="10" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="10"></RowDefinition>
<#for (int i=0;i<entity.Properties.Count;i++) {#>
                    <RowDefinition Height="auto"></RowDefinition>
<#}#>
                    <RowDefinition Height="*"></RowDefinition>
                    <RowDefinition Height="10"></RowDefinition>
                </Grid.RowDefinitions>
<#
PushIndent("\t");
PushIndent("\t");
PushIndent("\t");
PushIndent("\t");

const int col = 2;
int row=1;

foreach (var prop in entity.Properties)
{
    WriteLine(XAMLHelper.ToControlText(prop, col, row));
    WriteLine(string.Empty);
    row++;
}


ClearIndent();
#>
    
            </Grid>
        </GroupBox>

    </Grid>
</Window>
 
<# 
        string fileName = proj.GetFileName(entity.Name) + ".xaml";
        SaveOutput(fileName);
    }
#>
<#+
    //Don't change the code below or the generation will not work

    public CodeGenProject LoadProject()
    {
        string directory = GetSolutionDirectory();
        string filePath= Path.Combine(directory, Constants.GenerationInputFileName);
        return CodeGenProject.LoadFromFile(filePath);
    }

    private string GetSolutionDirectory()
    {
        string templateDirectory= GetTemplateDirectory();
        int projectIndex= templateDirectory.IndexOf(Constants.TemplatesDirectoryName);
        return templateDirectory.Substring(0, projectIndex + Constants.TemplatesDirectoryName.Length);
    }

    private string GetTemplateDirectory()
    {
        return Path.GetDirectoryName(Host.TemplateFile);
    }

    private void SaveOutput(string outputFileName)
    {
        SaveOutput(outputFileName, string.Empty);
    }

    private void SaveOutput(string outputFileName, string subDirectory) 
	{
        string templateDirectory = GetTemplateDirectory();
        if (!string.IsNullOrEmpty(subDirectory))
        {
            templateDirectory = Path.Combine(templateDirectory, subDirectory);
        }
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        if (!Directory.Exists(templateDirectory))
        {
            Directory.CreateDirectory(templateDirectory);
        }

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Clear();
    }
#>