<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".out" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(projectDir)\Assemblies\KellermanSoftware.NET-Code-Generator-Logic.dll" #>
<#@ include file="$(projectDir)\Includes\VBNetHelper.tt" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic.Models" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
/* 
Name: VB.NET Class with Regions
Author: Greg Finzer
Description: Create a simple VB.NET POCO with a list of properties inside regions
*/
    CodeGenProject proj= LoadProject();
   
    foreach(var entity in  proj.Entities)
    {        
#>
#Region "Includes"
Imports System
#End Region

Namespace <#=proj.ProjectNamespace #>
    Public Class <#= entity.NamePascalCase #>
        #Region "Properties"
<# foreach (var prop in entity.Properties){#>
        Public Property <#= prop.NamePascalCase #>() As <#=VBNetHelper.ToType(prop) #>   
<#}#>
        #End Region

        #Region "Constructor"
		Public Sub New()
		End Sub
		#End Region
    End Class
End Namespace

<# 
        string fileName = proj.GetFileName(entity.Name) + ".vb";
        SaveOutput(fileName);
    }
#>
<#+
    const string codeGenTemplatesName = "NET-Code-Generator-Templates";
    const string inputName= "GenerationInput.json";

    public CodeGenProject LoadProject()
    {
        string directory = GetSolutionDirectory();
        string filePath= Path.Combine(directory, inputName);
        return CodeGenProject.LoadFromFile(filePath);
    }

    private string GetSolutionDirectory()
    {
        string templateDirectory= GetTemplateDirectory();
        int projectIndex= templateDirectory.IndexOf(codeGenTemplatesName);
        return templateDirectory.Substring(0, projectIndex + codeGenTemplatesName.Length);
    }

    private string GetTemplateDirectory()
    {
        return Path.GetDirectoryName(Host.TemplateFile);
    }

    private void SaveOutput(string outputFileName)
    {
        SaveOutput(outputFileName, string.Empty);
    }

    private void SaveOutput(string outputFileName, string subDirectory) 
	{
        string templateDirectory = GetTemplateDirectory();
        if (!string.IsNullOrEmpty(subDirectory))
        {
            templateDirectory = Path.Combine(templateDirectory, subDirectory);
        }
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        if (!Directory.Exists(templateDirectory))
        {
            Directory.CreateDirectory(templateDirectory);
        }

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Clear();
    }
#>