<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".out" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(projectDir)\Assemblies\KellermanSoftware.NET-Code-Generator-Logic.dll" #>
<#@ import namespace="KellermanSoftware.NetCodeGenerator.Logic.Models" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#
/* 
Name: Base Example
Author: Greg Finzer
Description: Base Example for a file for each class/entity.  Change the Name, Author, and Description.
*/
    CodeGenProject proj= LoadProject();
   
    foreach(var entity in  proj.Entities)
    {#>

*** Put Class/Entity Specific Code Here.  Think of it like a header.  ****
Company Name: <#= proj.CompanyName #>
Project Namespace: <#= proj.ProjectNamespace #>
Entity Name: <#= entity.Name #>
Entity Description:  <#= entity.Name #>
Entity Table Name:  <#= entity.TableName #>

<#      foreach (var prop in entity.Properties) 
        {#>
            *** Put Property Specific Code Here  **** 
            Property Name:  <#= prop.Name #>
            Property Description:  <#= prop.Description #>
            Property Data Type:  <#= prop.DataType #>
            Property Control Name:  <#= prop.ControlName #>
            Property Control Type:  <#= prop.ControlType #>

<#}#>

*** Put Class/Entity Specific Code Here.  Think of it like a footer.  ****        

<# 
        //Change the file extension from .txt to whatever is desired
        string fileName = proj.GetFileName(entity.Name) + ".txt";
        SaveOutput(fileName);
    }
#>
<#+
    //Don't change the code below or the generation will not work

    const string codeGenTemplatesName = "NET-Code-Generator-Templates";
    const string inputName= "GenerationInput.json";

    public CodeGenProject LoadProject()
    {
        string directory = GetSolutionDirectory();
        string filePath= Path.Combine(directory, inputName);
        return CodeGenProject.LoadFromFile(filePath);
    }

    private string GetSolutionDirectory()
    {
        string templateDirectory= GetTemplateDirectory();
        int projectIndex= templateDirectory.IndexOf(codeGenTemplatesName);
        return templateDirectory.Substring(0, projectIndex + codeGenTemplatesName.Length);
    }

    private string GetTemplateDirectory()
    {
        return Path.GetDirectoryName(Host.TemplateFile);
    }

    private void SaveOutput(string outputFileName)
    {
        SaveOutput(outputFileName, string.Empty);
    }

    private void SaveOutput(string outputFileName, string subDirectory) 
	{
        string templateDirectory = GetTemplateDirectory();
        if (!string.IsNullOrEmpty(subDirectory))
        {
            templateDirectory = Path.Combine(templateDirectory, subDirectory);
        }
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        if (!Directory.Exists(templateDirectory))
        {
            Directory.CreateDirectory(templateDirectory);
        }

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Clear();
    }
#>